// ############################### JAVASCRIPT ###############################

  window.addEventListener("load", () => {
    window.scrollTo(0, 0);
    document.documentElement.scrollTop = 0;
    document.body.scrollTop = 0;
  });

  
  document.querySelectorAll('.article-collapsible').forEach(h2 => {
    h2.addEventListener('click', () => {
      h2.classList.toggle('active');
      const content = h2.nextElementSibling;
      if (!content) return;
      // –ø–ª–∞–≤–Ω–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
      if (content.style.maxHeight) {
        content.style.maxHeight = null;
      } else {
        content.style.maxHeight = content.scrollHeight + 'px';
      }
    });
  });

  const buttons = document.querySelectorAll('.instruction');
  buttons.forEach( button => {
    button.addEventListener("click", () => {
      const target = button.getAttribute("data-tab");
      showSection(target);
    });
  });

// ############################################################################################# –¢–û–ü –ë–ê–†



// ############################### –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (tabs)
const tabs = document.querySelectorAll('.tab');                       // 1) –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∞–±—ã –∏ –∫–æ–Ω—Ç–µ–Ω—Ç-—Å–µ–∫—Ü–∏–∏

// 2) –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
function onTabClick(event) {
  const targetTab = event.currentTarget;
  tabs.forEach(tab => tab.classList.remove('active'));                // 2.1) –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ —Ç–∞–±—ã –∏ –∫–æ–Ω—Ç–µ–Ω—Ç—ã
  targetTab.classList.add('active');                                  // 2.2) –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–ª–∏–∫–Ω—É—Ç—ã–π —Ç–∞–± –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
}
tabs.forEach(tab => { tab.addEventListener('click', onTabClick); });  // 3) –ù–∞–≤–µ—à–∏–≤–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑
// ###############################


// ############################### –ù–ê–í–ò–ì–ê–¶–ò–Ø
  /* ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  GAMBURGER & MOBILE MENU  ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó */
  const burger      = document.querySelector('.burger');
  const mobileMenu  = document.getElementById('mobileMenu');

  burger.addEventListener('click', () => {
    mobileMenu.classList.toggle('active');
  });

  // –î–µ–ª–µ–≥–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –ø–æ –ø—É–Ω–∫—Ç–∞–º
  mobileMenu.addEventListener('click', (e) => {
    const link = e.target.closest('.mobile-link');
    if (!link) return;
    mobileMenu.classList.remove('active');

    const target = link.dataset.tab;
    history.pushState({ tab: target }, '', `#${target}`);
    showSection(target);
  });

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ —Ä–µ—Å–∞–π–∑–µ > 768px
  window.addEventListener('resize', () => {
    if (window.innerWidth > 768) mobileMenu.classList.remove('active');
  });
// ###############################



// ############################### HISTORY API
// üîπ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏
function showSection(id) {
  // 1. –°–Ω–∏–º–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  document.querySelectorAll(".tab").forEach(t => t.classList.remove("active"));
  document.querySelectorAll(".section").forEach(s => s.classList.remove("active"));

  // 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–± –∏ —Å–µ–∫—Ü–∏—é
  const isGPTSection = /^gpt\d+$/.test(id); // ‚Üê –µ—Å–ª–∏ —ç—Ç–æ –æ–¥–Ω–∞ –∏–∑ gpt-—Å–µ–∫—Ü–∏–π

  // –ï—Å–ª–∏ —ç—Ç–æ gpt1‚Äìgpt10, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º tab "guide"
  const activeTab = isGPTSection ? "guide" : id;

  document.querySelector(`.tab[data-tab="${activeTab}"]`)?.classList.add("active");
  document.getElementById(id)?.classList.add("active");

  // 3. –û–±–Ω–æ–≤–ª—è–µ–º localStorage
  localStorage.setItem("activeTab", id);
}

// üîπ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –≤–∫–ª–∞–¥–∫–µ ‚Üí –∏—Å—Ç–æ—Ä–∏—è
tabs.forEach(tab => {
  tab.addEventListener("click", () => {
    const target = tab.getAttribute("data-tab");
    history.pushState({ tab: target }, "", `#${target}`);
    showSection(target);
  });
});

// üîπ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Back/Forward
window.addEventListener("popstate", (event) => {
  const tab = event.state?.tab || "home";
  showSection(tab);
});

// üóÑÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
const savedTab = localStorage.getItem("activeTab");

// üîπ –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–µ—Å–ª–∏ –∑–∞—à–ª–∏ —Å #–≤–∫–ª–∞–¥–∫–æ–π –∏–ª–∏ —á–µ—Ä–µ–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é)
const initialTab = window.location.hash?.substring(1) || savedTab || "home";
history.replaceState({ tab: initialTab }, "", `#${initialTab}`);
showSection(initialTab);
// ###############################
// #############################################################################################

	
	
//  ############################################################################################# –ê–ù–ò–ú–ê–¶–ò–ò
// ############################### –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–ª—å—Å–∏—Ä—É—é—â–µ–≥–æ –∫—Ä—É–∂–∫–∞
function createPulseCircle() {
  const circle = document.createElement("div");
  circle.classList.add("pulse-circle");

  // üé® –°–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  const colors = [
    "--color-research", "--color-creative",
    "--color-education", "--color-meta",
    "--color-strategy"
  ];
  const randomColor = colors[Math.floor(Math.random() * colors.length)];
  circle.style.color = getComputedStyle(document.documentElement)
                        .getPropertyValue(randomColor);

  // üìç –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ —ç–∫—Ä–∞–Ω—É
  const x = Math.random() * window.innerWidth;
  const y = Math.random() * window.innerHeight;
  circle.style.left = `${x}px`;
  circle.style.top  = `${y}px`;

  // ‚ûï –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–æ–π
  document.getElementById("pulse-layer").appendChild(circle);

  // üßπ –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
  setTimeout(() => circle.remove(), 3600);
}
// ###############################


// ############################### –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ª–∏–Ω–∏–∏
function createAnimatedLine() {
  const colors = [
    "#00fbfa", "#0023db", "#fc3fe6", "#2ff7bb", "#fcfc32",
    "#2bd0f7", "#4dfc95", "#fc2f3c", "#fb9209", "#7e6dc9"
  ];
  const pulseLayer = document.getElementById("pulse-layer");

  // 1) –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–∏–Ω–∏–∏
  const length   = 20 + Math.random() * 50;
  const distance = 100;
  const angle    = Math.random() * 360;

  // 2) –°–ª—É—á–∞–π–Ω–∞—è —Ç–æ—á–∫–∞ —Å—Ç–∞—Ä—Ç–∞
  const x0 = Math.random() * window.innerWidth;
  const y0 = Math.random() * window.innerHeight;

  // 3) –û–±—ë—Ä—Ç–∫–∞ —Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º
  const wrapper = document.createElement("div");
  wrapper.className = "pulse-line-wrapper";
  wrapper.style.left      = `${x0}px`;
  wrapper.style.top       = `${y0}px`;
  wrapper.style.transform = `rotate(${angle}deg)`;

  // 4) –°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ –ª–∏–Ω–∏—è
  const line = document.createElement("div");
  line.className = "pulse-line";
  line.style.setProperty("--length",   `${length}px`);
  line.style.setProperty("--distance", `${distance}px`);
  line.style.backgroundColor = colors[
    Math.floor(Math.random() * colors.length)
  ];

  // 5) –í—Å—Ç–∞–≤–ª—è–µ–º –∏ —É–¥–∞–ª—è–µ–º
  wrapper.appendChild(line);
  pulseLayer.appendChild(wrapper);
  setTimeout(() => pulseLayer.removeChild(wrapper), 2000);
}
//  ###############################


// ############################### –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã —á–µ—Ä–µ–∑ requestAnimationFrame
function startCircleGenerator() {
  let lastTs = 0;
  let nextDelay = 300 + Math.random() * 500;

  function loop(timestamp) {
    if (!lastTs) lastTs = timestamp;
    if (timestamp - lastTs >= nextDelay) {
      if (Math.random() < 0.5) {
        createPulseCircle();
      }
      nextDelay = 300 + Math.random() * 500;
      lastTs = timestamp;
    }
    requestAnimationFrame(loop);
  }

  requestAnimationFrame(loop);
}

function startLineGenerator() {
  let lastTs = 0;
  const interval = 600;

  function loop(timestamp) {
    if (!lastTs) lastTs = timestamp;
    if (timestamp - lastTs >= interval) {
      createAnimatedLine();
      lastTs = timestamp;
    }
    requestAnimationFrame(loop);
  }

  requestAnimationFrame(loop);
}
// ###############################


// ############################### –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π –ö—Ä—É–∂–∫–∏/–õ–∏–Ω–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞

document.addEventListener('DOMContentLoaded', () => {
  // 1. –ß–∏—Ç–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
  const conn      = navigator.connection || navigator.mozConnection || navigator.webkitConnection;
  const type      = conn?.type;               // 'wifi', 'cellular', ...
  const effective = conn?.effectiveType;      // 'slow-2g', '2g', '3g', '4g'
  const saveData  = conn?.saveData || false;  // true, –µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω Data Saver

  // 2. –í—ã—á–∏—Å–ª—è–µ–º —Ñ–ª–∞–≥ ¬´–±—ã—Å—Ç—Ä–æ–π¬ª —Å–µ—Ç–∏
  const isFastNetwork = (type === 'wifi' || (effective === '4g' && !saveData));

  if (isFastNetwork) {
    setTimeout(() => {
      startCircleGenerator();
      startLineGenerator();
    }, 5000);
  } else {
    // –≠–∫–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º. –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å. –ü–æ–∫–∞ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ.
  }
});

// ###############################
//  #############################################################################################
